
Mobile_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000041c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  0000041c  00000490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001674  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000004c0  00000000  00000000  00001b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00002010  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000050b  00000000  00000000  000020d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001e1  00000000  00000000  000025db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000475  00000000  00000000  000027bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00002c34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000151  00000000  00000000  00002d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014a  00000000  00000000  00002e61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3a       	cpi	r26, 0xA6	; 166
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 ea       	ldi	r26, 0xA6	; 166
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3a       	cpi	r26, 0xA6	; 166
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 0c 02 	jmp	0x418	; 0x418 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "PWM.h"
#include "UART.h"
int main(void)
{
	uint8_t receiver=0;
	Uart_init();
  92:	0e 94 ca 00 	call	0x194	; 0x194 <Uart_init>
	PWM_init_timer1_oc1a();
  96:	0e 94 9a 00 	call	0x134	; 0x134 <PWM_init_timer1_oc1a>
	set_duty_oc1a(0);
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 a0 00 	call	0x140	; 0x140 <set_duty_oc1a>
	Uart_Write_string(" T to turn on & O to turn off & R to reverse & 4 speeds 70% --> 100% ");
  a2:	80 e6       	ldi	r24, 0x60	; 96
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Uart_Write_string>
		if(receiver=='T'){
			SETBIT(DDRC,0);
			SETBIT(DDRC,1);
			SETBIT(PORTC,0);
			CLRBIT(PORTC,1);
			Uart_Write_string(" T to turn on & O to turn off & R to reverse & 4 speeds 70% --> 100% ");
  aa:	c0 e6       	ldi	r28, 0x60	; 96
  ac:	d0 e0       	ldi	r29, 0x00	; 0
			{
				set_duty_oc1a(100);
			}
				}
		else if(receiver=='R'){
			TOGBIT(PORTC,0);
  ae:	01 e0       	ldi	r16, 0x01	; 1
			TOGBIT(PORTC,1);
  b0:	12 e0       	ldi	r17, 0x02	; 2
	set_duty_oc1a(0);
	Uart_Write_string(" T to turn on & O to turn off & R to reverse & 4 speeds 70% --> 100% ");
    while(1)
    {

		receiver=Uart_Read();			
  b2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <Uart_Read>
		if(receiver=='T'){
  b6:	84 35       	cpi	r24, 0x54	; 84
  b8:	41 f4       	brne	.+16     	; 0xca <main+0x38>
			SETBIT(DDRC,0);
  ba:	a0 9a       	sbi	0x14, 0	; 20
			SETBIT(DDRC,1);
  bc:	a1 9a       	sbi	0x14, 1	; 20
			SETBIT(PORTC,0);
  be:	a8 9a       	sbi	0x15, 0	; 21
			CLRBIT(PORTC,1);
  c0:	a9 98       	cbi	0x15, 1	; 21
			Uart_Write_string(" T to turn on & O to turn off & R to reverse & 4 speeds 70% --> 100% ");
  c2:	ce 01       	movw	r24, r28
  c4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Uart_Write_string>
  c8:	f4 cf       	rjmp	.-24     	; 0xb2 <main+0x20>
			}
		else if(receiver=='6'){set_duty_oc1a(60);}
  ca:	86 33       	cpi	r24, 0x36	; 54
  cc:	29 f4       	brne	.+10     	; 0xd8 <main+0x46>
  ce:	8c e3       	ldi	r24, 0x3C	; 60
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 a0 00 	call	0x140	; 0x140 <set_duty_oc1a>
  d6:	ed cf       	rjmp	.-38     	; 0xb2 <main+0x20>
		else if(receiver=='7'){set_duty_oc1a(70);}
  d8:	87 33       	cpi	r24, 0x37	; 55
  da:	29 f4       	brne	.+10     	; 0xe6 <main+0x54>
  dc:	86 e4       	ldi	r24, 0x46	; 70
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 a0 00 	call	0x140	; 0x140 <set_duty_oc1a>
  e4:	e6 cf       	rjmp	.-52     	; 0xb2 <main+0x20>
		else if(receiver=='8'){set_duty_oc1a(80);}
  e6:	88 33       	cpi	r24, 0x38	; 56
  e8:	29 f4       	brne	.+10     	; 0xf4 <main+0x62>
  ea:	80 e5       	ldi	r24, 0x50	; 80
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 a0 00 	call	0x140	; 0x140 <set_duty_oc1a>
  f2:	df cf       	rjmp	.-66     	; 0xb2 <main+0x20>
		else if(receiver=='9'){set_duty_oc1a(90);}
  f4:	89 33       	cpi	r24, 0x39	; 57
  f6:	29 f4       	brne	.+10     	; 0x102 <main+0x70>
  f8:	8a e5       	ldi	r24, 0x5A	; 90
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 a0 00 	call	0x140	; 0x140 <set_duty_oc1a>
 100:	d8 cf       	rjmp	.-80     	; 0xb2 <main+0x20>
		else if(receiver=='1'){
 102:	81 33       	cpi	r24, 0x31	; 49
 104:	49 f4       	brne	.+18     	; 0x118 <main+0x86>
			receiver=Uart_Read();
 106:	0e 94 d5 00 	call	0x1aa	; 0x1aa <Uart_Read>
			if (receiver=='0')
 10a:	80 33       	cpi	r24, 0x30	; 48
 10c:	91 f6       	brne	.-92     	; 0xb2 <main+0x20>
			{
				set_duty_oc1a(100);
 10e:	84 e6       	ldi	r24, 0x64	; 100
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 a0 00 	call	0x140	; 0x140 <set_duty_oc1a>
 116:	cd cf       	rjmp	.-102    	; 0xb2 <main+0x20>
			}
				}
		else if(receiver=='R'){
 118:	82 35       	cpi	r24, 0x52	; 82
 11a:	39 f4       	brne	.+14     	; 0x12a <main+0x98>
			TOGBIT(PORTC,0);
 11c:	85 b3       	in	r24, 0x15	; 21
 11e:	80 27       	eor	r24, r16
 120:	85 bb       	out	0x15, r24	; 21
			TOGBIT(PORTC,1);
 122:	85 b3       	in	r24, 0x15	; 21
 124:	81 27       	eor	r24, r17
 126:	85 bb       	out	0x15, r24	; 21
 128:	c4 cf       	rjmp	.-120    	; 0xb2 <main+0x20>
			}
		else if(receiver=='O'){
 12a:	8f 34       	cpi	r24, 0x4F	; 79
 12c:	11 f6       	brne	.-124    	; 0xb2 <main+0x20>
			CLRBIT(DDRC,0);
 12e:	a0 98       	cbi	0x14, 0	; 20
			CLRBIT(DDRC,1);		
 130:	a1 98       	cbi	0x14, 1	; 20
 132:	bf cf       	rjmp	.-130    	; 0xb2 <main+0x20>

00000134 <PWM_init_timer1_oc1a>:
10 bit
oc1a
*/ 
#include "PWM.h"
void PWM_init_timer1_oc1a(){
	SETBIT(DDRD,5);
 134:	8d 9a       	sbi	0x11, 5	; 17
	TCCR1A= (1<<COM1A1)|(1<<WGM10)|(1<<WGM11);
 136:	83 e8       	ldi	r24, 0x83	; 131
 138:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=(1<<WGM12)|(1<<CS10);
 13a:	89 e0       	ldi	r24, 0x09	; 9
 13c:	8e bd       	out	0x2e, r24	; 46
	
	
}
 13e:	08 95       	ret

00000140 <set_duty_oc1a>:
void set_duty_oc1a(uint16_t duty){
OCR1A=10.23*duty;
 140:	bc 01       	movw	r22, r24
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 1b 01 	call	0x236	; 0x236 <__floatunsisf>
 14a:	24 e1       	ldi	r18, 0x14	; 20
 14c:	3e ea       	ldi	r19, 0xAE	; 174
 14e:	43 e2       	ldi	r20, 0x23	; 35
 150:	51 e4       	ldi	r21, 0x41	; 65
 152:	0e 94 81 01 	call	0x302	; 0x302 <__mulsf3>
 156:	0e 94 ef 00 	call	0x1de	; 0x1de <__fixunssfsi>
 15a:	dc 01       	movw	r26, r24
 15c:	cb 01       	movw	r24, r22
 15e:	9b bd       	out	0x2b, r25	; 43
 160:	8a bd       	out	0x2a, r24	; 42
}
 162:	08 95       	ret

00000164 <PWM_init_timer1_oc1b>:
void PWM_init_timer1_oc1b(){
	SETBIT(DDRD,4);
 164:	8c 9a       	sbi	0x11, 4	; 17
	TCCR1A= (1<<COM1B1)|(1<<WGM10)|(1<<WGM11);
 166:	83 e2       	ldi	r24, 0x23	; 35
 168:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=(1<<WGM12)|(1<<CS10);	
 16a:	89 e0       	ldi	r24, 0x09	; 9
 16c:	8e bd       	out	0x2e, r24	; 46
}
 16e:	08 95       	ret

00000170 <set_duty_oc1b>:
void set_duty_oc1b(uint16_t duty){
	OCR1B=10.23*duty;
 170:	bc 01       	movw	r22, r24
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 1b 01 	call	0x236	; 0x236 <__floatunsisf>
 17a:	24 e1       	ldi	r18, 0x14	; 20
 17c:	3e ea       	ldi	r19, 0xAE	; 174
 17e:	43 e2       	ldi	r20, 0x23	; 35
 180:	51 e4       	ldi	r21, 0x41	; 65
 182:	0e 94 81 01 	call	0x302	; 0x302 <__mulsf3>
 186:	0e 94 ef 00 	call	0x1de	; 0x1de <__fixunssfsi>
 18a:	dc 01       	movw	r26, r24
 18c:	cb 01       	movw	r24, r22
 18e:	99 bd       	out	0x29, r25	; 41
 190:	88 bd       	out	0x28, r24	; 40
}
 192:	08 95       	ret

00000194 <Uart_init>:
 *  Author: safifi
 */ 
#include "UART.h"
void Uart_init(){
	// baud rate
	UBRRL = 103;// baud rate 9600, F_CPU = 16Mhz
 194:	87 e6       	ldi	r24, 0x67	; 103
 196:	89 b9       	out	0x09, r24	; 9

	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN) | (1<<TXEN); 
 198:	88 e1       	ldi	r24, 0x18	; 24
 19a:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)| (1<<UCSZ1)|(1<<UCSZ0); // 8 bit data transfer
 19c:	86 e8       	ldi	r24, 0x86	; 134
 19e:	80 bd       	out	0x20, r24	; 32
}
 1a0:	08 95       	ret

000001a2 <Uart_Write>:

void Uart_Write(uint8_t data){
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );  // check trans
 1a2:	5d 9b       	sbis	0x0b, 5	; 11
 1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <Uart_Write>
	UDR = data;
 1a6:	8c b9       	out	0x0c, r24	; 12
	
}
 1a8:	08 95       	ret

000001aa <Uart_Read>:

uint8_t Uart_Read(){
	while ( !(UCSRA & (1<<RXC)) );
 1aa:	5f 9b       	sbis	0x0b, 7	; 11
 1ac:	fe cf       	rjmp	.-4      	; 0x1aa <Uart_Read>
	return UDR;
 1ae:	8c b1       	in	r24, 0x0c	; 12
}
 1b0:	08 95       	ret

000001b2 <Uart_Write_string>:
void Uart_Write_string(uint8_t* str){
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	8c 01       	movw	r16, r24
	uint8_t i=0;
	while (str[i]!=0){
 1ba:	fc 01       	movw	r30, r24
 1bc:	80 81       	ld	r24, Z
 1be:	88 23       	and	r24, r24
 1c0:	51 f0       	breq	.+20     	; 0x1d6 <Uart_Write_string+0x24>
uint8_t Uart_Read(){
	while ( !(UCSRA & (1<<RXC)) );
	return UDR;
}
void Uart_Write_string(uint8_t* str){
	uint8_t i=0;
 1c2:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[i]!=0){
		Uart_Write(str[i]);
 1c4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Uart_Write>
		i++;
 1c8:	cf 5f       	subi	r28, 0xFF	; 255
	while ( !(UCSRA & (1<<RXC)) );
	return UDR;
}
void Uart_Write_string(uint8_t* str){
	uint8_t i=0;
	while (str[i]!=0){
 1ca:	f8 01       	movw	r30, r16
 1cc:	ec 0f       	add	r30, r28
 1ce:	f1 1d       	adc	r31, r1
 1d0:	80 81       	ld	r24, Z
 1d2:	88 23       	and	r24, r24
 1d4:	b9 f7       	brne	.-18     	; 0x1c4 <Uart_Write_string+0x12>
		Uart_Write(str[i]);
		i++;
	}
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	08 95       	ret

000001de <__fixunssfsi>:
 1de:	70 d0       	rcall	.+224    	; 0x2c0 <__fp_splitA>
 1e0:	88 f0       	brcs	.+34     	; 0x204 <__fixunssfsi+0x26>
 1e2:	9f 57       	subi	r25, 0x7F	; 127
 1e4:	90 f0       	brcs	.+36     	; 0x20a <__fixunssfsi+0x2c>
 1e6:	b9 2f       	mov	r27, r25
 1e8:	99 27       	eor	r25, r25
 1ea:	b7 51       	subi	r27, 0x17	; 23
 1ec:	a0 f0       	brcs	.+40     	; 0x216 <__fixunssfsi+0x38>
 1ee:	d1 f0       	breq	.+52     	; 0x224 <__fixunssfsi+0x46>
 1f0:	66 0f       	add	r22, r22
 1f2:	77 1f       	adc	r23, r23
 1f4:	88 1f       	adc	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	1a f0       	brmi	.+6      	; 0x200 <__fixunssfsi+0x22>
 1fa:	ba 95       	dec	r27
 1fc:	c9 f7       	brne	.-14     	; 0x1f0 <__fixunssfsi+0x12>
 1fe:	12 c0       	rjmp	.+36     	; 0x224 <__fixunssfsi+0x46>
 200:	b1 30       	cpi	r27, 0x01	; 1
 202:	81 f0       	breq	.+32     	; 0x224 <__fixunssfsi+0x46>
 204:	77 d0       	rcall	.+238    	; 0x2f4 <__fp_zero>
 206:	b1 e0       	ldi	r27, 0x01	; 1
 208:	08 95       	ret
 20a:	74 c0       	rjmp	.+232    	; 0x2f4 <__fp_zero>
 20c:	67 2f       	mov	r22, r23
 20e:	78 2f       	mov	r23, r24
 210:	88 27       	eor	r24, r24
 212:	b8 5f       	subi	r27, 0xF8	; 248
 214:	39 f0       	breq	.+14     	; 0x224 <__fixunssfsi+0x46>
 216:	b9 3f       	cpi	r27, 0xF9	; 249
 218:	cc f3       	brlt	.-14     	; 0x20c <__fixunssfsi+0x2e>
 21a:	86 95       	lsr	r24
 21c:	77 95       	ror	r23
 21e:	67 95       	ror	r22
 220:	b3 95       	inc	r27
 222:	d9 f7       	brne	.-10     	; 0x21a <__fixunssfsi+0x3c>
 224:	3e f4       	brtc	.+14     	; 0x234 <__fixunssfsi+0x56>
 226:	90 95       	com	r25
 228:	80 95       	com	r24
 22a:	70 95       	com	r23
 22c:	61 95       	neg	r22
 22e:	7f 4f       	sbci	r23, 0xFF	; 255
 230:	8f 4f       	sbci	r24, 0xFF	; 255
 232:	9f 4f       	sbci	r25, 0xFF	; 255
 234:	08 95       	ret

00000236 <__floatunsisf>:
 236:	e8 94       	clt
 238:	09 c0       	rjmp	.+18     	; 0x24c <__floatsisf+0x12>

0000023a <__floatsisf>:
 23a:	97 fb       	bst	r25, 7
 23c:	3e f4       	brtc	.+14     	; 0x24c <__floatsisf+0x12>
 23e:	90 95       	com	r25
 240:	80 95       	com	r24
 242:	70 95       	com	r23
 244:	61 95       	neg	r22
 246:	7f 4f       	sbci	r23, 0xFF	; 255
 248:	8f 4f       	sbci	r24, 0xFF	; 255
 24a:	9f 4f       	sbci	r25, 0xFF	; 255
 24c:	99 23       	and	r25, r25
 24e:	a9 f0       	breq	.+42     	; 0x27a <__floatsisf+0x40>
 250:	f9 2f       	mov	r31, r25
 252:	96 e9       	ldi	r25, 0x96	; 150
 254:	bb 27       	eor	r27, r27
 256:	93 95       	inc	r25
 258:	f6 95       	lsr	r31
 25a:	87 95       	ror	r24
 25c:	77 95       	ror	r23
 25e:	67 95       	ror	r22
 260:	b7 95       	ror	r27
 262:	f1 11       	cpse	r31, r1
 264:	f8 cf       	rjmp	.-16     	; 0x256 <__floatsisf+0x1c>
 266:	fa f4       	brpl	.+62     	; 0x2a6 <__floatsisf+0x6c>
 268:	bb 0f       	add	r27, r27
 26a:	11 f4       	brne	.+4      	; 0x270 <__floatsisf+0x36>
 26c:	60 ff       	sbrs	r22, 0
 26e:	1b c0       	rjmp	.+54     	; 0x2a6 <__floatsisf+0x6c>
 270:	6f 5f       	subi	r22, 0xFF	; 255
 272:	7f 4f       	sbci	r23, 0xFF	; 255
 274:	8f 4f       	sbci	r24, 0xFF	; 255
 276:	9f 4f       	sbci	r25, 0xFF	; 255
 278:	16 c0       	rjmp	.+44     	; 0x2a6 <__floatsisf+0x6c>
 27a:	88 23       	and	r24, r24
 27c:	11 f0       	breq	.+4      	; 0x282 <__floatsisf+0x48>
 27e:	96 e9       	ldi	r25, 0x96	; 150
 280:	11 c0       	rjmp	.+34     	; 0x2a4 <__floatsisf+0x6a>
 282:	77 23       	and	r23, r23
 284:	21 f0       	breq	.+8      	; 0x28e <__floatsisf+0x54>
 286:	9e e8       	ldi	r25, 0x8E	; 142
 288:	87 2f       	mov	r24, r23
 28a:	76 2f       	mov	r23, r22
 28c:	05 c0       	rjmp	.+10     	; 0x298 <__floatsisf+0x5e>
 28e:	66 23       	and	r22, r22
 290:	71 f0       	breq	.+28     	; 0x2ae <__floatsisf+0x74>
 292:	96 e8       	ldi	r25, 0x86	; 134
 294:	86 2f       	mov	r24, r22
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	2a f0       	brmi	.+10     	; 0x2a6 <__floatsisf+0x6c>
 29c:	9a 95       	dec	r25
 29e:	66 0f       	add	r22, r22
 2a0:	77 1f       	adc	r23, r23
 2a2:	88 1f       	adc	r24, r24
 2a4:	da f7       	brpl	.-10     	; 0x29c <__floatsisf+0x62>
 2a6:	88 0f       	add	r24, r24
 2a8:	96 95       	lsr	r25
 2aa:	87 95       	ror	r24
 2ac:	97 f9       	bld	r25, 7
 2ae:	08 95       	ret

000002b0 <__fp_split3>:
 2b0:	57 fd       	sbrc	r21, 7
 2b2:	90 58       	subi	r25, 0x80	; 128
 2b4:	44 0f       	add	r20, r20
 2b6:	55 1f       	adc	r21, r21
 2b8:	59 f0       	breq	.+22     	; 0x2d0 <__fp_splitA+0x10>
 2ba:	5f 3f       	cpi	r21, 0xFF	; 255
 2bc:	71 f0       	breq	.+28     	; 0x2da <__fp_splitA+0x1a>
 2be:	47 95       	ror	r20

000002c0 <__fp_splitA>:
 2c0:	88 0f       	add	r24, r24
 2c2:	97 fb       	bst	r25, 7
 2c4:	99 1f       	adc	r25, r25
 2c6:	61 f0       	breq	.+24     	; 0x2e0 <__fp_splitA+0x20>
 2c8:	9f 3f       	cpi	r25, 0xFF	; 255
 2ca:	79 f0       	breq	.+30     	; 0x2ea <__fp_splitA+0x2a>
 2cc:	87 95       	ror	r24
 2ce:	08 95       	ret
 2d0:	12 16       	cp	r1, r18
 2d2:	13 06       	cpc	r1, r19
 2d4:	14 06       	cpc	r1, r20
 2d6:	55 1f       	adc	r21, r21
 2d8:	f2 cf       	rjmp	.-28     	; 0x2be <__fp_split3+0xe>
 2da:	46 95       	lsr	r20
 2dc:	f1 df       	rcall	.-30     	; 0x2c0 <__fp_splitA>
 2de:	08 c0       	rjmp	.+16     	; 0x2f0 <__fp_splitA+0x30>
 2e0:	16 16       	cp	r1, r22
 2e2:	17 06       	cpc	r1, r23
 2e4:	18 06       	cpc	r1, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	f1 cf       	rjmp	.-30     	; 0x2cc <__fp_splitA+0xc>
 2ea:	86 95       	lsr	r24
 2ec:	71 05       	cpc	r23, r1
 2ee:	61 05       	cpc	r22, r1
 2f0:	08 94       	sec
 2f2:	08 95       	ret

000002f4 <__fp_zero>:
 2f4:	e8 94       	clt

000002f6 <__fp_szero>:
 2f6:	bb 27       	eor	r27, r27
 2f8:	66 27       	eor	r22, r22
 2fa:	77 27       	eor	r23, r23
 2fc:	cb 01       	movw	r24, r22
 2fe:	97 f9       	bld	r25, 7
 300:	08 95       	ret

00000302 <__mulsf3>:
 302:	0b d0       	rcall	.+22     	; 0x31a <__mulsf3x>
 304:	78 c0       	rjmp	.+240    	; 0x3f6 <__fp_round>
 306:	69 d0       	rcall	.+210    	; 0x3da <__fp_pscA>
 308:	28 f0       	brcs	.+10     	; 0x314 <__mulsf3+0x12>
 30a:	6e d0       	rcall	.+220    	; 0x3e8 <__fp_pscB>
 30c:	18 f0       	brcs	.+6      	; 0x314 <__mulsf3+0x12>
 30e:	95 23       	and	r25, r21
 310:	09 f0       	breq	.+2      	; 0x314 <__mulsf3+0x12>
 312:	5a c0       	rjmp	.+180    	; 0x3c8 <__fp_inf>
 314:	5f c0       	rjmp	.+190    	; 0x3d4 <__fp_nan>
 316:	11 24       	eor	r1, r1
 318:	ee cf       	rjmp	.-36     	; 0x2f6 <__fp_szero>

0000031a <__mulsf3x>:
 31a:	ca df       	rcall	.-108    	; 0x2b0 <__fp_split3>
 31c:	a0 f3       	brcs	.-24     	; 0x306 <__mulsf3+0x4>

0000031e <__mulsf3_pse>:
 31e:	95 9f       	mul	r25, r21
 320:	d1 f3       	breq	.-12     	; 0x316 <__mulsf3+0x14>
 322:	95 0f       	add	r25, r21
 324:	50 e0       	ldi	r21, 0x00	; 0
 326:	55 1f       	adc	r21, r21
 328:	62 9f       	mul	r22, r18
 32a:	f0 01       	movw	r30, r0
 32c:	72 9f       	mul	r23, r18
 32e:	bb 27       	eor	r27, r27
 330:	f0 0d       	add	r31, r0
 332:	b1 1d       	adc	r27, r1
 334:	63 9f       	mul	r22, r19
 336:	aa 27       	eor	r26, r26
 338:	f0 0d       	add	r31, r0
 33a:	b1 1d       	adc	r27, r1
 33c:	aa 1f       	adc	r26, r26
 33e:	64 9f       	mul	r22, r20
 340:	66 27       	eor	r22, r22
 342:	b0 0d       	add	r27, r0
 344:	a1 1d       	adc	r26, r1
 346:	66 1f       	adc	r22, r22
 348:	82 9f       	mul	r24, r18
 34a:	22 27       	eor	r18, r18
 34c:	b0 0d       	add	r27, r0
 34e:	a1 1d       	adc	r26, r1
 350:	62 1f       	adc	r22, r18
 352:	73 9f       	mul	r23, r19
 354:	b0 0d       	add	r27, r0
 356:	a1 1d       	adc	r26, r1
 358:	62 1f       	adc	r22, r18
 35a:	83 9f       	mul	r24, r19
 35c:	a0 0d       	add	r26, r0
 35e:	61 1d       	adc	r22, r1
 360:	22 1f       	adc	r18, r18
 362:	74 9f       	mul	r23, r20
 364:	33 27       	eor	r19, r19
 366:	a0 0d       	add	r26, r0
 368:	61 1d       	adc	r22, r1
 36a:	23 1f       	adc	r18, r19
 36c:	84 9f       	mul	r24, r20
 36e:	60 0d       	add	r22, r0
 370:	21 1d       	adc	r18, r1
 372:	82 2f       	mov	r24, r18
 374:	76 2f       	mov	r23, r22
 376:	6a 2f       	mov	r22, r26
 378:	11 24       	eor	r1, r1
 37a:	9f 57       	subi	r25, 0x7F	; 127
 37c:	50 40       	sbci	r21, 0x00	; 0
 37e:	8a f0       	brmi	.+34     	; 0x3a2 <__mulsf3_pse+0x84>
 380:	e1 f0       	breq	.+56     	; 0x3ba <__mulsf3_pse+0x9c>
 382:	88 23       	and	r24, r24
 384:	4a f0       	brmi	.+18     	; 0x398 <__mulsf3_pse+0x7a>
 386:	ee 0f       	add	r30, r30
 388:	ff 1f       	adc	r31, r31
 38a:	bb 1f       	adc	r27, r27
 38c:	66 1f       	adc	r22, r22
 38e:	77 1f       	adc	r23, r23
 390:	88 1f       	adc	r24, r24
 392:	91 50       	subi	r25, 0x01	; 1
 394:	50 40       	sbci	r21, 0x00	; 0
 396:	a9 f7       	brne	.-22     	; 0x382 <__mulsf3_pse+0x64>
 398:	9e 3f       	cpi	r25, 0xFE	; 254
 39a:	51 05       	cpc	r21, r1
 39c:	70 f0       	brcs	.+28     	; 0x3ba <__mulsf3_pse+0x9c>
 39e:	14 c0       	rjmp	.+40     	; 0x3c8 <__fp_inf>
 3a0:	aa cf       	rjmp	.-172    	; 0x2f6 <__fp_szero>
 3a2:	5f 3f       	cpi	r21, 0xFF	; 255
 3a4:	ec f3       	brlt	.-6      	; 0x3a0 <__mulsf3_pse+0x82>
 3a6:	98 3e       	cpi	r25, 0xE8	; 232
 3a8:	dc f3       	brlt	.-10     	; 0x3a0 <__mulsf3_pse+0x82>
 3aa:	86 95       	lsr	r24
 3ac:	77 95       	ror	r23
 3ae:	67 95       	ror	r22
 3b0:	b7 95       	ror	r27
 3b2:	f7 95       	ror	r31
 3b4:	e7 95       	ror	r30
 3b6:	9f 5f       	subi	r25, 0xFF	; 255
 3b8:	c1 f7       	brne	.-16     	; 0x3aa <__mulsf3_pse+0x8c>
 3ba:	fe 2b       	or	r31, r30
 3bc:	88 0f       	add	r24, r24
 3be:	91 1d       	adc	r25, r1
 3c0:	96 95       	lsr	r25
 3c2:	87 95       	ror	r24
 3c4:	97 f9       	bld	r25, 7
 3c6:	08 95       	ret

000003c8 <__fp_inf>:
 3c8:	97 f9       	bld	r25, 7
 3ca:	9f 67       	ori	r25, 0x7F	; 127
 3cc:	80 e8       	ldi	r24, 0x80	; 128
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	08 95       	ret

000003d4 <__fp_nan>:
 3d4:	9f ef       	ldi	r25, 0xFF	; 255
 3d6:	80 ec       	ldi	r24, 0xC0	; 192
 3d8:	08 95       	ret

000003da <__fp_pscA>:
 3da:	00 24       	eor	r0, r0
 3dc:	0a 94       	dec	r0
 3de:	16 16       	cp	r1, r22
 3e0:	17 06       	cpc	r1, r23
 3e2:	18 06       	cpc	r1, r24
 3e4:	09 06       	cpc	r0, r25
 3e6:	08 95       	ret

000003e8 <__fp_pscB>:
 3e8:	00 24       	eor	r0, r0
 3ea:	0a 94       	dec	r0
 3ec:	12 16       	cp	r1, r18
 3ee:	13 06       	cpc	r1, r19
 3f0:	14 06       	cpc	r1, r20
 3f2:	05 06       	cpc	r0, r21
 3f4:	08 95       	ret

000003f6 <__fp_round>:
 3f6:	09 2e       	mov	r0, r25
 3f8:	03 94       	inc	r0
 3fa:	00 0c       	add	r0, r0
 3fc:	11 f4       	brne	.+4      	; 0x402 <__fp_round+0xc>
 3fe:	88 23       	and	r24, r24
 400:	52 f0       	brmi	.+20     	; 0x416 <__fp_round+0x20>
 402:	bb 0f       	add	r27, r27
 404:	40 f4       	brcc	.+16     	; 0x416 <__fp_round+0x20>
 406:	bf 2b       	or	r27, r31
 408:	11 f4       	brne	.+4      	; 0x40e <__fp_round+0x18>
 40a:	60 ff       	sbrs	r22, 0
 40c:	04 c0       	rjmp	.+8      	; 0x416 <__fp_round+0x20>
 40e:	6f 5f       	subi	r22, 0xFF	; 255
 410:	7f 4f       	sbci	r23, 0xFF	; 255
 412:	8f 4f       	sbci	r24, 0xFF	; 255
 414:	9f 4f       	sbci	r25, 0xFF	; 255
 416:	08 95       	ret

00000418 <_exit>:
 418:	f8 94       	cli

0000041a <__stop_program>:
 41a:	ff cf       	rjmp	.-2      	; 0x41a <__stop_program>
